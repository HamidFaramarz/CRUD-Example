import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main(List<String> args) {
  runApp(CRUDExample());
}

class CRUDExample extends StatefulWidget {
  @override
  _CRUDExampleState createState() => _CRUDExampleState();
}

class _CRUDExampleState extends State<CRUDExample> {
  String _baseUrl = 'https://jsonplaceholder.typicode.com';
  String _route = '/posts';
  late List _data;

  @override
  void initState() {
    super.initState();
    _getData();
  }

  _getData() async {
    var response = await http.get(Uri.parse(_baseUrl + _route));
    setState(() {
      _data = json.decode(response.body);
    });
  }

  _createData() async {
    var data = {"title": "New Title", "body": "New Body"};
    var response =
        await http.post(Uri.parse(_baseUrl + _route), body: json.encode(data));
    _getData();
  }

  _updateData(int id) async {
    var data = {"title": "Updated Title", "body": "Updated Body"};
    var response = await http.put(Uri.parse(_baseUrl + _route + '/$id'),
        body: json.encode(data));
    _getData();
  }

  _deleteData(int id) async {
    var response = await http.delete(Uri.parse(_baseUrl + _route + '/$id'));
    _getData();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text("CRUD Example"),
        ),
        body: _data != null
            ? ListView.builder(
                itemCount: _data.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(_data[index]['title']),
                    subtitle: Text(_data[index]['body']),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: <Widget>[
                        IconButton(
                          icon: Icon(Icons.edit),
                          onPressed: () => _updateData(_data[index]['id']),
                        ),
                        IconButton(
                          icon: Icon(Icons.delete),
                          onPressed: () => _deleteData(_data[index]['id']),
                        ),
                      ],
                    ),
                  );
                },
              )
            : Center(child: CircularProgressIndicator()),
        floatingActionButton: FloatingActionButton(
          onPressed: _createData,
          child: Icon(Icons.add),
        ),
      ),
    );
  }
}
